openapi: 3.0.0
info:
  title: Final Project
  version: 1.0.0
  description: |
    **Final Project**  
tags:
  - name: Login & Register
    description: ------
  - name: Products
    description: ------

servers:
  - url: http://localhost:8000

components:
  schemas:
    LoginToken:
      type: object
      properties:
        token:
          type: string
          example: 2log16x25A
    LoginData:
      type: object
      properties:
        email:
          type: string
          example: name@gmail.com
        password:
          type: string
          example: 12345
    RegisterData:
      type: object
      properties:
        name:
          type: string
          example: name
        email:
          type: string
          example: name@gmail.com
        password:
          type: string
          example: 12345
    Products:
      type: object
      properties:
        category_id:
          type: number
          example: 1
        name:
          type: string
          example: productName
        price:
          type: number
          format: float
          example: 100000.2
        description:
          type: string
          example: productDescription
        img_url:
          type: string
          example: http://xyz.png
    ProductsId:
      type: object
      properties:
        id:
          type: number
          example: 1
        user_id:
          type: number
          example: 1
        category_id:
          type: number
          example: 1
        name:
          type: string
          example: productName
        price:
          type: number
          format: float
          example: 100000.1
        description:
          type: string
          example: productDescription
        img_url:
          type: string
          example: http://xyz.png
        sold:
          type: boolean
          example: false
        created_at:
          type: number
          format: datetime
          example: 1970-01-01 00:00:01
        update_at:
          type: number
          format: datetime
          example: 1970-01-01 00:00:01
  requestBodies:
    LoginRequest:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/LoginData"
    RegisterRequest:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/RegisterData"
    ProductsRequest:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Products"
    ProductsRequestId:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ProductsId"
  responses:
    LoginResponse:
      description: ok
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/LoginToken"
    ProductResponse:
      description: PostProducts
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Products"
    ProductsResponse:
      description: List All Products
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/Products"
            example:
              DefaultSample:
              value:
                - id: 1
                  user_id: 1
                  category_id: 1
                  name: productName1
                  price: 100000.1
                  description: productDescription1
                  img_url: http://xyz.png
                  sold: false
                  created_at: 1970-01-01 00:00:01
                  update_at: 1970-01-01 00:00:01
                - id: 2
                  user_id: 2
                  category_id: 2
                  name: productName2
                  price: 100000.2
                  description: productDescription2
                  img_url: http://xyz.png
                  sold: false
                  created_at: 1970-02-02 00:00:02
                  update_at: 1970-02-02 00:00:02
                - id: 3
                  user_id: 3
                  category_id: 3
                  name: productName3
                  price: 100000.3
                  description: productDescription3
                  img_url: http://xyz.png
                  sold: false
                  created_at: 1970-03-03 00:00:03
                  update_at: 1970-03-03 00:00:03
    ProductsByIdResponses:
      description: ok
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ProductsId"
    PutProductsByIDResponses:
      description: updated
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ProductsId"

  securitySchemes:
    bearerAuth:
      type: http
      bearerFormat: JWT
      scheme: bearer

paths:
  /api/v1/login:
    post:
      tags:
        - Login & Register
      summary: Login
      description: Login endpoint
      requestBody:
        $ref: "#/components/requestBodies/LoginRequest"
      responses:
        200:
          $ref: "#/components/responses/LoginResponse"

  /api/v1/register:
    post:
      tags:
        - Login & Register
      summary: Register
      description: Register endpoint
      requestBody:
        $ref: "#/components/requestBodies/RegisterRequest"
      responses:
        200:
          description: Success

  /api/v1/products:
    post:
      tags:
        - Products
      summary: Post Products
      description: Post Products endpoint
      security:
        - bearerAuth: []
      requestBody:
        $ref: "#/components/requestBodies/ProductsRequest"
      responses:
        200:
          $ref: "#/components/responses/ProductsByIdResponses"
    get:
      tags:
        - Products
      summary: Get Products
      description: Get Products endpoint
      responses:
        200:
          $ref: "#/components/responses/ProductsResponse"

  /api/v1/products/{id}:
    get:
      tags:
        - Products
      summary: Get Products by id
      description: Get Products by id endpoint
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
      responses:
        200:
          $ref: "#/components/responses/ProductsByIdResponses"

    put:
      tags:
        - Products
      summary: Put Products by id
      description: Put Products by id endpoint
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
      security:
        - bearerAuth: []
      requestBody:
        $ref: "#/components/requestBodies/ProductsRequestId"
      responses:
        200:
          $ref: "#/components/responses/PutProductsByIDResponses"

    delete:
      tags:
        - Products
      summary: Delete Products by id
      description: Delete Products by id endpoint
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
      security:
        - bearerAuth: []
      responses:
        200:
          description: delete

  